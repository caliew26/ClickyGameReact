{"version":3,"sources":["components/navigation/index.js","components/Footer/index.js","components/Card/index.js","components/Input/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","react_router_dom","to","Footer","href","class","CardTile","props","onClick","scoreIncrease","id","alt","name","src","image","Input","App","state","cardTiles","score","highscore","gameOver","restartGame","_this","map","navigation","Card","this","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4oCAmBeA,MAff,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,uCAAuCE,GAAG,KAA1D,qBAGAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,wSCGDG,MAXf,WACE,OACEN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,uDAAR,qBACHP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,wCAAR,gBACHP,EAAAC,EAAAC,cAAA,QAAMM,MAAM,cAAZ,8CCISC,EAVC,SAAAC,GACZ,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYQ,QAAS,kBAAID,EAAME,cAAcF,EAAMG,MAC9Db,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKY,IAAKJ,EAAMK,KAAMC,IAAKN,EAAMO,WCMlCC,ICkCAC,6MAnCbC,MAAQ,CACNC,YACAC,MAAO,EACPC,UAAW,KAGbC,SAAW,eAIXC,YAAc,eAKdb,cAAgB,WAEdc,EAAKN,MAAMC,UAAUM,+EAIrB,OACE3B,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAC0B,EAAD,MACE5B,EAAAC,EAAAC,cAAC2B,EAAD,CACAjB,cAAekB,KAAKlB,cACpBC,GAAIQ,EAAUR,GACdkB,IAAKV,EAAUR,GACfI,MAAOI,EAAUJ,QAEjBjB,EAAAC,EAAAC,cAAC8B,EAAD,cAhCQC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92352906.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"./style.css\";\n\nfunction NavBar(){\n    return (\n        <nav className=\"nav navbar-dark navbar-expand{-sm|-md|-lg|-xl}\">\n            <Link className=\"navbar-brand navbar-text form-inline\" to=\"/\">\n            Giphy-Clicky Game\n            </Link>\n            <div className=\"navbar-nav\">\n                <p className=\"nav-item\">\n                    Wanna test your memory? This is a different kind of memory game.  You're going to have 12 images, click one, and then remember which ones you've clicked because I'm going to shuffle them after every click.  Can you remember them all?  If you click the wrong one, game over, you lose!\n                </p>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <p>caliew26@gmail.com</p>\n      <p><a href=\"https://www.linkedin.com/in/cali-mitchell-1896b34a/\">LinkedIn Profile</a></p>\n      <p><a href=\"assets/images/Cali Mitchell 2019.pdf\">2019 Resume</a></p>\n      <span class=\"text-muted\">Copyright Cali Mitchell &copy; 2019</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\n\n\nconst CardTile= props => {\n    return(\n        <div className=\"container\" onClick={()=>props.scoreIncrease(props.id)}>\n            <div className=\"image\">\n                <img alt={props.name} src={props.image} />\n            </div>\n        </div>\n    )\n}\n\nexport default CardTile;","import React from \"react\";\n\n// This component lets us use a bootstrap input element without worrying about class names\n// or manually wrapping the input with a form-group div\n// All of the props passed to this component are spread onto the input element\nfunction Input(props) {\n  return (\n    <div className=\"input-group input-group-lg\">\n      <input className=\"form-control\" type=\"text\" {...props} />\n    </div>\n  );\n}\n\nexport default Input;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport NavBar from \"./components/navigation\";\nimport Footer from \"./components/Footer\";\nimport cardTiles from \"./cardTiles.json\";\nimport CardTile from \"./components/Card\";\nimport {Container, Row, Col } from \"./components/Grid\";\nimport Input from \"./components/Input\";\n\nclass App extends Component {\n  //I want this to be my array in cardTiles.json\n  state = {\n    cardTiles,\n    score: 0,\n    highscore: 0\n  }\n\n  gameOver = () => {\n    //this is going to be when the user clicks the same box twice, the game will be over\n  }\n\n  restartGame = () => {\n    //this will be a reset of the score\n    //could be combined with \"gameOver\"?\n  }\n\n  scoreIncrease = () => {\n    //this will be for the onclick and the score increases\n    this.state.cardTiles.map()\n  }\n\n  render() {\n    return (\n      <Router>\n        <NavBar/>\n          <CardTile\n          scoreIncrease={this.scoreIncrease}\n          id={cardTiles.id}\n          key={cardTiles.id}\n          image={cardTiles.image}\n          />\n          <Footer/>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}